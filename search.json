[{"title":"主流Linux发行版(Ubuntu/CentOS/Debian)系统默认glibc版本","url":"//linux-glibc-version.html","content":"\n**glic**是GNU项目的标准C运行库。glibc 是 Linux 系统中最底层的API，几乎其它任何运行库都会依赖于glibc。\n<!--more-->\nLinux各个发行版都是基于Linux内核的，也就是说理论上某个发行版编译出来的二进制文件在其他Linux发行版都可以运行，但是实际上并非如此，因为动态链接编译出来的可执行文件依赖的库其他系统可能不满足需求（相应的库不存在或者库的版本不满足需求）。\n\n想要一次编译就能在其他Linux发行版运行，可以以静态链接的方式进行编译，但是大型软件都会依赖很多其他的第三方库，静态链接的方式可能不太现实。\n\n动态链接的可执行文件在其他系统运行，可能会提示缺少某个动态库或者相应库版本过低，这时能想到的就升级更高版本的库。这种做法很对，但是**千万不要升级glibc，千万不要升级glibc，千万不要升级glibc**，重要的事需要说三遍。\n\n没有金刚钻就不要升级glibc！因为glibc是系统最基础的C库，几乎所有的运行库都依赖它，特别是系统命令，一旦升级了glibc极有可能会导致很多系统命令都没法正常使用，这个系统基本上就报废了，这是很多Linux小白容易遇到的问题。\n\n其他依赖的第三方库都可以升级，唯有glibc不建议升级。正确的做法是在同一版本或者更低版本glibc的系统上进行编译可执行文件。\n\n下表是主流Linux发行版Ubuntu/CentOS/Debian系统默认的glic版本。\n\nUbuntu | Debian | CentOS | Glibc \n:---:|:---:|:---:|:---:\n22.04|-|-|2.34\n20.04|11|-| 2.31\n-|10|8| 2.28\n18.04|-|-|2.27\n-|9|-| 2.24\n16.04|-|-|2.23\n14.04|8|-|2.19\n13.04|-|7|2.17\n12.04|-|-|2.15\n-|7|-|2.13\n-|-|6|2.12\n\n通过上表可以看到 CentOS7 的 glibc 版本为2.17，如果使用 CentOS7 系统编译的可执行文件，就可以在 Ubuntu13.04 以及更新版本和 Debian8 及更新版本上运行。\n\n查看Linux系统glibc版本有多种方法：\n\n**方法1**\n```sh\nldd --version\n```\n\n**方法2**\n```sh\n# 查询libc.so位置\nfind / -name libc.so.6\n\n# libc.so也是可执行文件，直接运行\n/xxxx/libc.so.6\n\n# 或者查看符号\nstrings libc.so.6 | grep GLIBC\n```\n","tags":["linux"],"categories":["技术","Linux"]},{"title":"FFmpeg生成静音音频和黑屏视频命令","url":"//ffmpeg-cmd-generate-silent-audio-pure-color-video.html","content":"\n开发中有时需要生成静音音频或者纯色黑屏视频为便于测试或其他特殊应用场景，可以使用FFmpeg命令`-f lavfi`来搞定。\n<!--more-->\n\n## 生成静音音频\n可以使用`anullsrc`或者`aevalsrc`来生成静音音频，`aevalsrc`还可以生成其他类型声音。\n\n以下命令生成10s特定采样率和声道的静音音频，可以指定编码器进行编码。\n\n### anullsrc\n```sh\nffmpeg -f lavfi -i anullsrc -t 10 silent-audio.mp3\n# or\nffplay -f lavfi -i anullsrc=r=44100:cl=stereo -t 10 silent-audio.mp3\n```\n- sample_rate, r\n\n    指定采样率，默认44100。\n\n- channel_layout, cl\n\n    指定通道布局，详见 *libavutil/channel_layout.c* 中 *channel_layout_map* 定义，常见`mono` `stereo` `5.1`。\n- -t\n\n    文件时长，不指定就一直生成。\n\n### aevalsrc\n\n```sh\nffmpeg -f lavfi -i aevalsrc=0 -t 10 silent-audio.mp3\n```\n\n\n## 生成纯色视频\n可以使用`color`或者`nullsrc`源来生成指定格式的纯色视频。\n\n### color\n```sh\nffmpeg -f lavfi -i color=size=1920x1080:rate=25:color=black:duration=5 black.mp4\n# or\nffmpeg -f lavfi -i color=s=1920x1080:r=25:c='#FF00FF':d=5 purple.mp4\n```\n\n- color,c:\n\n    视频颜色，可以是颜色名或者数值`#RRGGBB`,详见[ffmpeg color](https://ffmpeg.org/ffmpeg-utils.html#color-syntax)。\n\n\n### nullsrc\n\n```sh\nffmpeg -f lavfi -i nullsrc=size=1280x720:rate=25:duration=5,lutrgb=0:0:0 black.mp4\n# or\nffmpeg -f lavfi -i nullsrc=s=1280x720:r=25:d=5,lutrgb=255:0:255 purple.mp4\n```\n\n- size, s:\n\n    图像分辨率\n\n- rate, r:\n\n    视频帧率\n\n- duration, d:\n\n    视频时长\n\n## 生成纯色图像\n\n生成纯色图片仅需要把上述生成视频的帧率和时长都设置为1即可。\n```\nffmpeg -f lavfi -i color=s=1920x1080:r=1:c='#FF00FF':d=1 purple.jpg\n\n# or\nffmpeg -f lavfi -i nullsrc=s=1280x720:r=1:d=1,lutrgb=255:0:255 purple.png\n```\n\n----\n> 下面弄点好玩的\n\n## 正弦信号音频\n`aevalsrc`源可以产生特定参数的波形信号，前面`aevalsrc=0`产生静音信号，可以使用表达式来表示其信号波形。\n\n**生成48kHz采样率，频率为400Hz的长度10s的正弦信号单声道音频。**\n\n*可以使用 Foobar2000 的 示波仪 看到正弦信号波形。*\n\n```sh\nffmpeg -f lavfi -i aevalsrc=\"sin(400*2*PI*t):s=48000:d=10\" sin-400hz.mp3\n```\n\n**生成正弦+余弦 双声道信号**\n```sh\nffmpeg -f lavfi -i aevalsrc=\"sin(400*2*PI*t)|cos(420*2*PI*t):d=10\" sin-cos.mp3\n```\n长度可以使用`d=10` 或者 `-t 10`来指定。\n\n## 白噪声信号音频\n\n可以使用`aevalsrc` 或者 `anoisesrc` 函数来产生白噪声信号。\n\n### aevalsrc\n使用随机数函数生成信号值\n\n```sh\nffmpeg -f lavfi -i aevalsrc=\"-2+random(0)\" -t 10 wn.mp3\n```\n\n### anoisesrc\nanoisesrc是专门用于产生噪声的源。\n\n```sh\nffmpeg -f lavfi -i anoisesrc=c=white:c=white:r=44100:a=0.5:d=3 white.mp3\n```\n- sample_rate, r\n\n    采样率\n\n- amplitude, a\n\n    声音幅值，0.0-1.0。\n\n- duration, d\n\n    时长\n\n- color, colour, c\n\n    噪声类型，white, pink, brown, blue, violet and velvet，默认白色。\n\n## 文字转语音音频\n\n这个功能需要集成[libflite](http://www.festvox.org/flite/)库，编译时配置参数`--enable-libflite`。\n\n```sh\n# 读文本\nffmpeg -f lavfi -i flite=text='How are you? I am fine. Thank you and you?':voice=slt -t 10 voice.mp3\n\n# 读文件\nffmpeg -f lavfi -i flite=textfile=speech.txt -t 10 voice.mp3\n```\n\n默认是男声，`voice=slt`是女声。\n\n`ffplay -f lavfi -i flite=list_voices=1`可以列出所有支持的`voice`，例如：`kal, slt, rms`。\n\n测试发现不能识别中文，不知道是不是库版本原因。\n\n","tags":["ffmpeg"],"categories":["技术","音视频"]},{"title":"Linux系统编译FFmpeg","url":"//how-to-build-ffmpeg.html","content":"\n> 强烈推荐使用系统源安装ffmpeg，例如： `sudo apt install ffmpeg` for Ubuntu。\n> 当不能满足需求的时候再手动编译吧。\n\n有些Linux发行版可以在线安装ffmpeg，但是因为版权关系不能包含我们所需的编码器，有时候还是需要手动编译。\n下面介绍一些常见编码器的安装。**libx264**、**libx265**、**libfdk-aac**、**libmp3lame**、**libvpx**、**libopus**、**libaom for AV1**。不需要的可以不安装，最终ffmpeg configure不指定特定的编码器就可以了。\n\n<!--more-->\n对版本没要求的，可以使用发行版对应的应用仓库的命令进行安装。\n不想自己编译的可以直接下载我编译好的，GNU C Library (GNU libc) 版本大于等于2.17的系统都可以使用。常见的CentOS 7和Ubuntu13.04以上都应该都可以。 \n[百度网盘分享链接](https://pan.baidu.com/s/1Lz_VjAPgErFTJWKeP2uY9Q?pwd=8ubn)\n\n# FFmpeg常用第三方库列表\n\n库名 | FFmpeg启用参数 | 功能 | 编译方法\n:---:|:---|:---|:---:\n[x264](https://www.videolan.org/developers/x264.html) | --enable-libx264 | H.264/AVC 编码器 | [libx264](#libx264)\n[x265](https://www.videolan.org/developers/x265.html) | --enable-libx265 | HEVC/H.265 编码器 | [libx265](#libx265)\n[fdk-aac](https://sourceforge.net/projects/opencore-amr/files/fdk-aac/) | --enable-libfdk-aac | AAC 编码器 | [libfdk-aac](#libfdk-aac)\n[lame](https://sourceforge.net/projects/lame/files/lame/) | --enable-libmp3lame | MP3 编码器 | [libmp3lame](#libmp3lame)\n[libvpx](https://github.com/webmproject/libvpx) | --enable-libvpx | VP8/VP9编码器 | [libvpx](#libvpx)\n[opus](https://www.opus-codec.org/downloads/) | --enable-libopus | Opus 编码器 | [libopus](#libopus)\n[aom](https://aomedia.googlesource.com/aom) | --enable-libaom | AV1 编码器 | [libaom](#libaom)\n[libwebp](https://github.com/webmproject/libwebp/) | --enable-libwebp | webp 图像编码器 | [libwebp](#libwebp)\n[openssl](https://www.openssl.org/source/) | --enable-openssl | 解析 https 等加密流协议 | [openssl](#openssl)\n[zimg](https://github.com/sekrit-twc/zimg) | --enable-libzimg | zscale过滤器（图像色彩空间转换） | [libzimg](#libzimg)\n[IntelMediaSDK](https://github.com/Intel-Media-SDK/MediaSDK/releases) | --enable-libmfx | Intel QSV 硬件加速编码器 | [Intel Media SDK](#qsv)\n[SDL](https://www.libsdl.org/download-2.0.php) | --enable-ffplay | ffplay 播放器渲染 | [SDL](#SDL)\n\n# 编译第三方库\n## nasm\nnasm是汇编编译器，有些编码器包含汇编代码，需要使用nasm。有些系统命令安装的nasm版本比较低，比如centos7 yum版本2.10。可以选择手动编译安装2.15版本。\n```sh\nwget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.xz\ntar Jxvf nasm-2.15.05.tar.xz\npushd nasm-2.15.05\n\n./configure\nmake && make install\n\npopd\n```\n\n<h2 id=\"libx264\">libx264</h2>\n\nlibx264是市面上评价比较高的H.264编码器，很多高清电影都是使用x264压缩的。\n```sh\nwget https://code.videolan.org/videolan/x264/-/archive/master/x264-master.tar.bz2\ntar jxvf x264-master.tar.bz2\npushd x264-master\n\n./configure --enable-shared\nmake && make install\n\npopd\n```\n\nUbuntu系统在线安装\n```sh\nsudo apt install libx264-dev\n```\n\n<h2 id=\"libx265\">libx265</h2>\n\n出色的开源H.265编码器，可以使用hg命令下载源码。\n\nhg类似于git，好多系统可以在线安装这个命令。`apt install mercurial` / `yum install mercurial`。\n默认8bit编码模式，可以在配置时把 HIGH_BIT_DEPTH=ON 选择10bit。\n```sh\nhg clone http://hg.videolan.org/x265\npushd x265/build/linux/\ncmake ../../source -DHIGH_BIT_DEPTH=ON\nmake && make install\n\npopd\n```\n\nUbuntu系统在线安装\n```sh\nsudo apt install libx265-dev\n```\n\n<h2 id=\"libfdk-aac\">libfdk-aac</h2>\n\nlibfdk-aac是目前评价最高的开源aac编码器。Ubuntu仓库没有这个，必须手动编译安装。\n```sh\nwget -O fdk-aac-2.0.2.tar.gz https://sourceforge.net/projects/opencore-amr/files/fdk-aac/fdk-aac-2.0.2.tar.gz/download\ntar zxvf fdk-aac-2.0.2.tar.gz\n\npushd fdk-aac-2.0.2\n./autogen.sh\n./configure\nmake && make install\n\npopd\n```\n\n<h2 id=\"libmp3lame\">libmp3lame</h2>\n\nlibmp3lame 是mp3编码器。\n```sh\nwget -O lame-3.100.tar.gz https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz/download\ntar zxvf lame-3.100.tar.gz\npushd lame-3.100\n\n./configure\nmake && make install\n\npopd\n```\n\nUbuntu系统在线安装\n```sh\napt install libmp3lame-dev\n```\n\n<h2 id=\"libvpx\">libvpx</h2>\n\nlibvpx 是开源视频编码格式 VP8/VP9 的编码器。\n```sh\nwget https://github.com/webmproject/libvpx/archive/v1.10.0/libvpx-1.10.0.tar.gz\ntar zxvf libvpx-1.10.0.tar.gz \npushd libvpx-1.10.0\n\nmkdir libvpx-build && cd libvpx-build\n../configure --enable-shared --disable-static\nmake && make install\n\npopd\n```\n\nUbuntu系统在线安装\n```sh\napt install libvpx-dev\n```\n\n<h2 id=\"libopus\">libopus</h2>\n\nlibopus 是编码opus格式用的。\n```sh\nwget https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz\ntar zxvf opus-1.3.1.tar.gz\npushd opus-1.3.1\n\n./configure --enable-shared --disable-static\nmake && make install\n\npopd\n```\n\nUbuntu系统在线安装\n```sh\napt install libopus-dev\n```\n\n<h2 id=\"libaom\">libaom</h2>\n\n新出的 AV1 视频编码器\n```sh\ngit clone https://aomedia.googlesource.com/aom\npushd aom\n\ngit checkout v3.2.0 -b v3.2.0 #可指定版本\nmkdir build2 && cd build2\ncmake .. -DBUILD_SHARED_LIBS=true\nmake && make install\n\npopd\n```\n\n<h2 id=\"libwebp\">libwebp</h2>\n\nWebP 是Google推出的新一代针对网页的图像编码格式。\n\n```sh\ngit clone https://github.com/webmproject/libwebp.git\npushd libwebp\n\n./autogen.sh  # 出错的话 可能需要安装 libtool libsysfs\n./configure\nmake && make install\n\npopd\n```\n\n<h2 id=\"openssl\">OpenSSL</h2>\n\nOpenSSL 是常用的加解密库了，如果FFmpeg想要访问https等加密格式的媒体流的话就需要启用SSL支持，可以使用OpenSSL 或者 GnuTLS。\n\n注意OpenSSL版本，常用的是1.1.1和1.1.0，跳过2.x版本直接升级到3.x版本了，没有其他特殊原因，这里可以安装当前最新版3.0.1。\n\n```sh\nwget https://www.openssl.org/source/openssl-3.0.1.tar.gz\ntar zxvf openssl-3.0.1.tar.gz\npushd openssl-3.0.1\n./config\nmake && make install\n\npopd\n```\n\nUbuntu系统在线安装\n```sh\napt install libssl-dev openssl\n```\n\n<h2 id=\"libzimg\">libzimg</h2>\n\nzimg官方介绍是缩放、色彩空间转换和抖动库。比如要把HDR视频转换为SDR就需要用到`-vf zscale`过滤器，要使用这个功能就需要安装这个库，并在配置时指定`--enable-libzimg`。\n\n```sh\ngit clone https://github.com/sekrit-twc/zimg.git\npushd zimg\n\n./autogen.sh\n./configure\nmake & make install\n\npopd\n```\n\n<h2 id=\"qsv\">Intel Media SDK - Intel 硬件加速 qsv</h2>\n\nIntel处理器可以启用硬件加速视频编码，对应编码器为`qsv`和`hevc_qsv`不过编码质量不如软件编码高。\n\n下载` Intel-Media-SDK`，[https://github.com/Intel-Media-SDK/MediaSDK/releases\n](https://github.com/Intel-Media-SDK/MediaSDK/releases\n)，运行`install_media.sh` 默认安装在`/opt/`目录下了。\n\n```sh\nexport PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/intel/mediasdk/lib64/pkgconfig\n```\n\nffmepg 配置参数\n```sh\n--enable-libmfx\n```\n\n<h2 id=\"SDL\">SDL</h2>\n\nSDL是一套开放源代码的跨平台多媒体开发库，支持图像渲染声音播放等功能，编译ffplay需要安装这个库。\n\n```sh\nwget https://www.libsdl.org/release/SDL2-2.0.18.tar.gz\ntar zxvf SDL2-2.0.18.tar.gz\npushd SDL2-2.0.18\n\n./autogen.sh\n./configure\nmake && make install\n\npopd\n```\n\nUbuntu系统在线安装\n```sh\napt install libsdl2-dev\n```\n\n<h1>编译FFmpeg</h1>\n\n需要的编码器按照上述的文档安装完后，在配置ffmpeg的时候使用特定的参数指定就可以集成进去了。\n\n```sh\nwget https://ffmpeg.org/releases/ffmpeg-4.4.1.tar.bz2\ntar jxvf ffmpeg-4.4.1.tar.bz2\npushd ffmpeg-4.4.1\n\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/:/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH\n./configure --enable-shared --disable-static --enable-gpl --enable-nonfree \\\n\t--extra-version=SHAOLIMING \\\n\t--enable-libx264 \\\n\t--enable-libx265 \\\n\t--enable-libfdk-aac \\\n\t--enable-libmp3lame \\\n\t--enable-libvpx \\\n\t--enable-libopus \\\n\t--enable-libaom \\\n\t--enable-openssl \\\n\t--enable-libwebp \\\n\t--enable-libzimg \\\n\t--enable-ffplay\n\nmake && make install\n\npopd\n```\nmake install 后 ffmpeg 命令和相应的动态库就安装到系统目录了，默认一般是`/usr/local/bin/`和 `/usr/local/lib/`目录，可以使用`./configure --prefix=./xxxxx`来指定安装目录。\n\n## 编译 ffplay\n默认参数是不编译ffplay，编译ffplay需要先安装`SDL`，然后指定配置参数`--enable-ffplay`\n\n---\n不想动手的编译的，可以点这里下载，[百度网盘分享链接](https://pan.baidu.com/s/1Lz_VjAPgErFTJWKeP2uY9Q?pwd=8ubn)。","tags":["ffmpeg"],"categories":["技术","音视频"]},{"title":"Hello World","url":"//hello-world.html","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]